$# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Kernel # This would actually build your project, using zip for an example artifact
        id: build_kernel
        run: |
          sudo apt install build-essential flex bison libssl-dev libelf-dev qt5-default pkg-config libncurses-dev -y
          git clone https://github.com/microsoft/WSL2-Linux-Kernel.git -b linux-msft-wsl-4.19.y
          cd WSL2-Linux-Kernel
          curl https://raw.githubusercontent.com/Bartixxx32/wsl2kernel-unlocked/master/kernel-config >> .config
          make -j2
          cp arch/x86/boot/bzImage ./kernel
          ls
        env:
          ver: 4.19
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "4.19"
          release_name: "Release 4.19"
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./kernel
          asset_name: kernel
          asset_content_type: application/octet-stream
